/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.6
 * Generated at: 2025-04-29 06:23:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class dashBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Student & Results Management</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"CSS/AdminDashCSS.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <header>\r\n");
      out.write("        <h1>Student & Results Management</h1>\r\n");
      out.write("    </header>\r\n");
      out.write("    <div class=\"dashboard-links\">\r\n");
      out.write("        <button id=\"student-dashboard-btn\">Manage Students</button>\r\n");
      out.write("        <button id=\"results-dashboard-btn\">Manage Results</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- Student Management Section -->\r\n");
      out.write("    <div id=\"student-section\" class=\"content\">\r\n");
      out.write("        <form id=\"student-form\">\r\n");
      out.write("            <h2>Add / Update Student</h2>\r\n");
      out.write("            <input type=\"hidden\" id=\"student-id\">\r\n");
      out.write("            <input type=\"text\" id=\"student-name\" placeholder=\"Name\" required>\r\n");
      out.write("            <input type=\"date\" id=\"student-dob\" placeholder=\"Date of Birth\" required>\r\n");
      out.write("            <input type=\"email\" id=\"student-email\" placeholder=\"Email\" required>\r\n");
      out.write("            <input type=\"text\" id=\"student-phone\" placeholder=\"Phone\" required>\r\n");
      out.write("            <button type=\"submit\">Save</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <div class=\"table-container\">\r\n");
      out.write("            <h2>Student Records</h2>\r\n");
      out.write("            <table id=\"student-table\">\r\n");
      out.write("                <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>ID</th>\r\n");
      out.write("                    <th>Name</th>\r\n");
      out.write("                    <th>Date of Birth</th>\r\n");
      out.write("                    <th>Email</th>\r\n");
      out.write("                    <th>Phone</th>\r\n");
      out.write("                    <th>Actions</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody>\r\n");
      out.write("                <!-- Dynamic rows -->\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <!-- Results Management Section -->\r\n");
      out.write("    <div id=\"results-section\" class=\"content hidden\">\r\n");
      out.write("        <form id=\"results-form\">\r\n");
      out.write("            <h2>Add / Update Results</h2>\r\n");
      out.write("            <input type=\"hidden\" id=\"result-id\">\r\n");
      out.write("            <input type=\"number\" id=\"stud-id\" placeholder=\"Student ID\" required>\r\n");
      out.write("            <input type=\"text\" id=\"subject\" placeholder=\"Subject\" required>\r\n");
      out.write("            <input type=\"number\" id=\"marks\" placeholder=\"Marks\" required>\r\n");
      out.write("            <input type=\"text\" id=\"semester\" placeholder=\"Semester\" required>\r\n");
      out.write("            <button type=\"submit\">Save</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <div class=\"table-container\">\r\n");
      out.write("            <h2>Results Records</h2>\r\n");
      out.write("            <table id=\"results-table\">\r\n");
      out.write("                <thead>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Result ID</th>\r\n");
      out.write("                    <th>Student ID</th>\r\n");
      out.write("                    <th>Subject</th>\r\n");
      out.write("                    <th>Marks</th>\r\n");
      out.write("                    <th>Semester</th>\r\n");
      out.write("                    <th>Actions</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody>\r\n");
      out.write("                <!-- Dynamic rows -->\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("    // Initial data arrays\r\n");
      out.write("    const students = [];\r\n");
      out.write("    const results = [];\r\n");
      out.write("\r\n");
      out.write("    // Switching between dashboards\r\n");
      out.write("    document.getElementById(\"student-dashboard-btn\").addEventListener(\"click\", () => {\r\n");
      out.write("        document.getElementById(\"student-section\").classList.remove(\"hidden\");\r\n");
      out.write("        document.getElementById(\"results-section\").classList.add(\"hidden\");\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.getElementById(\"results-dashboard-btn\").addEventListener(\"click\", () => {\r\n");
      out.write("        document.getElementById(\"results-section\").classList.remove(\"hidden\");\r\n");
      out.write("        document.getElementById(\"student-section\").classList.add(\"hidden\");\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    /* ------------------- Student Management ------------------- */\r\n");
      out.write("    // Form submit event for students\r\n");
      out.write("    document.getElementById(\"student-form\").addEventListener(\"submit\", function (e) {\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        const id = document.getElementById(\"student-id\").value;\r\n");
      out.write("        const name = document.getElementById(\"student-name\").value;\r\n");
      out.write("        const dob = document.getElementById(\"student-dob\").value;\r\n");
      out.write("        const email = document.getElementById(\"student-email\").value;\r\n");
      out.write("        const phone = document.getElementById(\"student-phone\").value;\r\n");
      out.write("\r\n");
      out.write("        if (id) {\r\n");
      out.write("            // Update existing student\r\n");
      out.write("            const index = students.findIndex((student) => student.id === parseInt(id));\r\n");
      out.write("            if (index !== -1) {\r\n");
      out.write("                students[index] = { id: parseInt(id), name, dob, email, phone };\r\n");
      out.write("            }\r\n");
      out.write("        } else {\r\n");
      out.write("            // Add new student\r\n");
      out.write("            const newId = students.length ? students[students.length - 1].id + 1 : 1;\r\n");
      out.write("            students.push({ id: newId, name, dob, email, phone });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        resetStudentForm();\r\n");
      out.write("        renderStudentTable();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Render student table\r\n");
      out.write("    function renderStudentTable() {\r\n");
      out.write("        const tableBody = document.querySelector(\"#student-table tbody\");\r\n");
      out.write("        tableBody.innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("        students.forEach((student) => {\r\n");
      out.write("            const row = document.createElement(\"tr\");\r\n");
      out.write("\r\n");
      out.write("            row.innerHTML = `\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.name}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.dob}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.email}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.phone}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td class=\"actions\">\r\n");
      out.write("                <button class=\"edit\" onclick=\"editStudent(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\">Edit</button>\r\n");
      out.write("                <button class=\"delete\" onclick=\"deleteStudent(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${student.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\">Delete</button>\r\n");
      out.write("            </td>\r\n");
      out.write("        `;\r\n");
      out.write("\r\n");
      out.write("            tableBody.appendChild(row);\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Edit student\r\n");
      out.write("    function editStudent(id) {\r\n");
      out.write("        const student = students.find((student) => student.id === id);\r\n");
      out.write("        if (student) {\r\n");
      out.write("            document.getElementById(\"student-id\").value = student.id;\r\n");
      out.write("            document.getElementById(\"student-name\").value = student.name;\r\n");
      out.write("            document.getElementById(\"student-dob\").value = student.dob;\r\n");
      out.write("            document.getElementById(\"student-email\").value = student.email;\r\n");
      out.write("            document.getElementById(\"student-phone\").value = student.phone;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Delete student\r\n");
      out.write("    function deleteStudent(id) {\r\n");
      out.write("        const index = students.findIndex((student) => student.id === id);\r\n");
      out.write("        if (index !== -1) {\r\n");
      out.write("            students.splice(index, 1);\r\n");
      out.write("            renderStudentTable();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Reset student form\r\n");
      out.write("    function resetStudentForm() {\r\n");
      out.write("        document.getElementById(\"student-id\").value = \"\";\r\n");
      out.write("        document.getElementById(\"student-form\").reset();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* ------------------- Results Management ------------------- */\r\n");
      out.write("    // Form submit event for results\r\n");
      out.write("    document.getElementById(\"results-form\").addEventListener(\"submit\", function (e) {\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        const resultId = document.getElementById(\"result-id\").value;\r\n");
      out.write("        const studId = parseInt(document.getElementById(\"stud-id\").value);\r\n");
      out.write("        const subject = document.getElementById(\"subject\").value;\r\n");
      out.write("        const marks = parseInt(document.getElementById(\"marks\").value);\r\n");
      out.write("        const semester = document.getElementById(\"semester\").value;\r\n");
      out.write("\r\n");
      out.write("        if (!students.some((student) => student.id === studId)) {\r\n");
      out.write("            alert(\"Student ID not found. Please add the student first.\");\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        if (resultId) {\r\n");
      out.write("            // Update existing result\r\n");
      out.write("            const index = results.findIndex((result) => result.result_id === parseInt(resultId));\r\n");
      out.write("            if (index !== -1) {\r\n");
      out.write("                results[index] = { result_id: parseInt(resultId), stud_id: studId, subject, marks, semester };\r\n");
      out.write("            }\r\n");
      out.write("        } else {\r\n");
      out.write("            // Add new result\r\n");
      out.write("            const newResultId = results.length ? results[results.length - 1].result_id + 1 : 1;\r\n");
      out.write("            results.push({ result_id: newResultId, stud_id: studId, subject, marks, semester });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        resetResultsForm();\r\n");
      out.write("        renderResultsTable();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Render results table\r\n");
      out.write("    function renderResultsTable() {\r\n");
      out.write("        const tableBody = document.querySelector(\"#results-table tbody\");\r\n");
      out.write("        tableBody.innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("        results.forEach((result) => {\r\n");
      out.write("            const row = document.createElement(\"tr\");\r\n");
      out.write("\r\n");
      out.write("            row.innerHTML = `\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.result_id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.stud_id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.subject}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.marks}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.semester}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("            <td class=\"actions\">\r\n");
      out.write("                <button class=\"edit\" onclick=\"editResult(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.result_id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\">Edit</button>\r\n");
      out.write("                <button class=\"delete\" onclick=\"deleteResult(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result.result_id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\">Delete</button>\r\n");
      out.write("            </td>\r\n");
      out.write("        `;\r\n");
      out.write("\r\n");
      out.write("            tableBody.appendChild(row);\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Edit result\r\n");
      out.write("    function editResult(resultId) {\r\n");
      out.write("        const result = results.find((result) => result.result_id === resultId);\r\n");
      out.write("        if (result) {\r\n");
      out.write("            document.getElementById(\"result-id\").value = result.result_id;\r\n");
      out.write("            document.getElementById(\"stud-id\").value = result.stud_id;\r\n");
      out.write("            document.getElementById(\"subject\").value = result.subject;\r\n");
      out.write("            document.getElementById(\"marks\").value = result.marks;\r\n");
      out.write("            document.getElementById(\"semester\").value = result.semester;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Delete result\r\n");
      out.write("    function deleteResult(resultId) {\r\n");
      out.write("        const index = results.findIndex((result) => result.result_id === resultId);\r\n");
      out.write("        if (index !== -1) {\r\n");
      out.write("            results.splice(index, 1);\r\n");
      out.write("            renderResultsTable();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // Reset results form\r\n");
      out.write("    function resetResultsForm() {\r\n");
      out.write("        document.getElementById(\"result-id\").value = \"\";\r\n");
      out.write("        document.getElementById(\"results-form\").reset();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
